<svg xmlns="http://www.w3.org/2000/svg" version="1.0" viewBox="-68 -17 416 366"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
  <defs/>
  <circle cx="122.5" cy="155.5" r="132.9" fill="#fff" transform="matrix(1.42205 0 0 1.37087 -34 -47)"/>
  <path stroke="#000" d="M50 47c-87 5 193-21 193-21M29 119l213-94M36 125l201 83M52 46l112 81 87 89M253 212L235 25"/>
  <circle cx="126.6" cy="125.1" r="53" fill="#fff" transform="matrix(1.62224 0 0 1.51688 -46 -63)"/>
  <path d="M36 298c2 49 197 57 192-4l-2-21c-3-26-14-44-28-66l10-7c15-8 27-22 33-37l3-8 2-4c0-6 2-11 3-10h1l-1-3-1-10-1-19c-3-10-8-24-10-24l-1-1-5-11a82 82 0 00-116-24C99 59 83 77 79 88l-4 11c-2 6-3 32-1 44 0 7 4 16 7 23 2 4 0 12-5 13-3 1-11 7-11 9l-5 5c-3 1-5 5-7 6-12 20-25 75-17 99zM149 43v1l-1-1v-1l1 1zm10 1c1 0 3 1 3 4l-3 2-2-2v-5l2 1zm23 2c1 2-2 2-7 2s-10-2-10-3l17 1zm-50 2l-2 1h-1l1-1h2zm-4 4l-2 6-2 1-3 1v4l1 1-1 1c-1-1-1 1-1 4l1 3c1 0 3 2 3 6 0 5 0 6-3 5l-1-2-1-1-2 1 1 3c2 0 2 4 0 7-3 1-3 2-1 3 0 4 1 3 2-1l3-3v3l-2 7-1 5-6 8-2 9c1 0 2 3 1 5-1 3-1 3-2 2h-1l1 3c2 1 2 4 0 4l-1 1 2 2 1 1c0 1 0 2 1 1l1 1v2c1 0 3-3 3-9 0-8 0-13 2-22 1-5 3-5 5-1l-3 4c-1 2-2 2 0 4h3l2-1v2l-4 15c-1 11-1 12 3 14 3 4 4 4 7 0v3c-4 7-8 12-8 10l-3-5-2-3-1 3-1 4 2 2c0 3-2 3-6 0-3-3-15-3-22-1l-5 1c-3-1-7-17-8-29-4-23 3-47 20-66l3-5 8-6 9-6c1-1 2-2 3-1l3-1c0-5 3-2 4 1zm24-2l-2 1-1-1 2-1 1 1zm34 2c2 3 2 3 3 0s4-2 4 0c-2 3 0 4 2 5l3 1-3 4-1 3 7-1h1l-3 3-1 3v2c5 5 1 5-4 0-3-4-5-5-6-5l-1-3c0-4 0-4-4 1-2 2-3 3-5 2-4-1-4-4 1-3 4 0 3-4-1-8-3-3-4-3-5-1h-1c0-2-1-3-2-2l1 6 1 5-2-5-4-4 1-3c1-1 4-2 6-1l5-1c0-1 5 0 8 2zm-41 1l3 2c0-3 2-3 2 0l-1 2-6 5-6 3v-1c3-1 3-1 2-2-4-2-3-4 1-3 3 0 4-1 4-3 0-3 0-3-2-3l-2-2c-1-2 4-1 5 2zm-12 3c1 6 0 7-1 0l-2-5 3 5zm3-4l-1 1h-1l1-2 1 1zm20 7c-1 1-4-1-4-4s1-3 3 1l1 3zm46 0v3l-1-3v-1l1 1zm-52 1c1-1 1-1 1 2l-2 2-5 2c-3 1-3 1 0-2 1-2 4-4 4-2 1 1 2 0 2-2zm59 4v1c2 0 7 8 5 12l2 4 1 1 2 3c1 0 1-4-1-5v-2c1-5 5 0 5 4s0 6 2 7c1 2 2 3 1 5-1 4 0 4 1 4h2l-1 2c-1 0-1 2 1 7l2 9 2 5 1 1-1 2h-2l3 3 2 3c0 3-2 3-3 0 0-1 0-1 0 0l1 3c3 1 3 7 1 5l-3-3c-3-4-3-4-1 2 0 6 0 6-3 5-3 0-3 0-1 1l2 4c-2 1-2 12-1 12l-1 5-3 5c0 2-6 9-8 9-3 0 2-8 4-8l-1-1-3-3-2-3v-2c0-3-1-2-2 1l-4 3c-2 0-4 1-4 4-2 3-2 3 1 4 1 0 3 2 3 4s-2 2-4 2-3 0-2 2c2 3 7 3 9 0 2-2 3-2 3 0l-2 2-1 2v2h-2l-1-2-2 2 3 3c2 0 2 0 0 1l-4 1c-1-1-1 0-1 1l-2 4h-3c0-3-5-7-6-7-3 0-3 1-3 2 3 5-1 3-3-1v-6c2 3 4 3 4 0l3-4 1-4v-4c1 4 3 3 2-1l1-2 1-4c-1-1 0-4 3-8l3-7h1l2-1c-3-2 0-6 3-6 2-1 3-2 2-3h-1c-1 3-4-3-3-6l-1-4c-2-1-2 0-2 2l-1 3-2 2-1-1 3-10 4-8c0-4 2-4 2 0 1 4 3 3 3 0l2-5 1-4-1-5c0-2-2-3-4-3s-3 0-2 3 1 3-1 1l-5-7-2-5c0-1 6 2 6 5l3 1 2-1-2-3-2-2c0-1 1-2 2-1 2 0 3 0 3-4s-2-5-3-2c-2 2-2 2-2 0l-3-6-2-6v-2c-2-1-2-5 1-8 4-2 5-3 4-1zm-37 2h-4 4zm16 5h-2l-3-3h3l2 3zm-47 0v1l-2-1 1-1 1 1zm39 7l9 6v2h-2c-1 2-8-1-8-4-1-2-4-3-9-4-8-1-13-1-20 3-5 3-7 10-7 28-1 14-1 14-4 22l-5 12c0 6-4 8-4 4 0-3 0-3-1-2-2 5-2-1 0-7 3-4 3-5 1-8v-2l2 1 2 2c2 0 1-8-1-10-4-4-6-18-4-23 4-9 13-16 13-10l1-3c5-11 21-14 37-7zm-53 0l-2 1v-1l1-1 1 1zm3 4l-1 2-1-2 1-1 1 1zm43 6l5 4 2 2 2 1 1-1 3-2 7-1c5-4 5-4 5 0l-1 1-2 2-2 4-2 1 5-1c2-2 3 1 6 5 3 9 4 17 1 16-1-2-4 0-5 1v2l1 2 3 2-1 1c-2 0-3 3-2 4 0 4 0 5-10 5-7 1-9 2-7 4 3 1 3 2-1 10l-2 13c-1 3-7 7-15 7-4 0-4 0-4 3l3 4 3 4 4 7v4l1 5v2l1 6c1 4 0 6-1 6l-1 4c0 4-2 8-4 11-1 3-2 6-1 8l-3 7-5 2-2 3c0 3-3 7-7 10l-6 6c1 1-1 1-2 1-4 0-4 0-1-3l4-24-1-3-1 3c0 5-2 10-7 17-4 5-6 7-9 5-1 0-3-1-1-5l-2-6v-8l-3 3-2 4c-2-2-2-3 2-7 5-5 5-6 1-5-3 1-2-5 4-11 5-5 5-7 1-3-6 2-11 7-11 9-1 1-1 0-1-2l1-5c3 0 4-3 5-10l1-6c0-2 1-6 4-8 5-5 5-7 1-4-7 5-7 1 0-6l4-5-3 2c-2 2-4 2-5 1s0-3 4-7c4-6 7-11 7-14l-14 18-1 4c0 1-2 1-4-1v-2l1-3-3 2h-2l3-3 5-2h-2c-2 0 3-5 9-12 6-5 12-12 11-14h1l1 3 2 1c0 1 1 2 2 1 1 0 2 1 2 8l-1 8c-2 2-2 11 0 11l6-8 4-10h19l1-1 2-8c5-9 6-20 2-26-3-7-6-8-17-8h-9l5-3 2-1c-4 0-5-3-2-6 1-4 1-5-2-5-2-2-3-14 0-17 4-5 15-6 20-3zm40 26c-1 1-1 0-1-1v-3l1 4zm-79 10h-2c-2-1-3 0-5 3s-2 3-2 1c1-5 4-8 7-6l2 2zm18 11h4l6 1c1 2 2 2 3 2h1l2 2h2c0 1-2 2-3 1l-3 1v1l1 1c-1 1 0 3 2 1l1-1 3-1c2 0 3 0 2 5-1 4-10 16-15 16l-7 2-6 2 3-7c2-6 2-7 0-11-4-6-4-10-3-14 3-3 7-5 7-1zm35 15v2l3 3c3 0 1 4-2 10l-2 7c0 3-3 3-5 0v-11l4-11 1-2 1-1v3zm7 0l1 1h-2l-3-3 1 1 3 1zm-22 11l-4 1 2-3c2-1 3 0 2 2zm6 14c2 4 2 13 0 17-3 3-5 1-6-6-2-6-2-7 0-7 1 0 1-1-1-1-4-1-4-3-1-3l2 1 2 1c1 0 2-1 1-2-1-3 1-3 3 0zm36 0l-1 1-1-1v-3l2 3zm-24 4l-2 2v-2l1-1 1 1zm-84 11l-2-2c-1-1-1-2 1-1 1 0 2 1 1 3z"/>
  <path stroke="#000" d="M33 116l14-50"/>
  <circle cx="52.9" cy="43.3" r="30.8" fill="#d8d8d8"/>
  <circle cx="30.9" cy="123.5" r="10.5"/>
  <circle cx="235.7" cy="20.4" r="25.8" fill="#454545"/>
  <circle cx="254.1" cy="211.8" r="17.7" fill="#545454"/>
</svg>