/* Generated by the Nim Compiler v1.4.2 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI1208011 = {size: 0,kind: 2,base: null,node: null,finalizer: null};
var NTI1925075 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1214641 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1214635 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1208044 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI1885013 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI1890012 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1214653 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1214649 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1214408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1214728 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1208013 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI1208015 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI1214723 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1214617 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1214619 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1214633 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1214637 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI1214637 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1214637.node = NNI1214637;
var NNI1214633 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1214633.node = NNI1214633;
var NNI1214619 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1214619.node = NNI1214619;
NTI1214723.base = NTI1214617;
NTI1214728.base = NTI1214617;
var NNI1214617 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI1214723, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI1208015, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI1208013, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI1208013, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI1214728, name: "up", sons: null}]};
NTI1214617.node = NNI1214617;
var NNI1214408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1214408.node = NNI1214408;
NTI1214617.base = NTI1214408;
NTI1214619.base = NTI1214617;
NTI1214633.base = NTI1214619;
NTI1214637.base = NTI1214633;
var NNI1214649 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1214649.node = NNI1214649;
NTI1214649.base = NTI1214619;
var NNI1214653 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1214653.node = NNI1214653;
NTI1214653.base = NTI1214619;
var NNI1890012 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI1885013, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI1208044, name: "b", sons: null}]};
NTI1890012.node = NNI1890012;
var NNI1214635 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1214635.node = NNI1214635;
NTI1214635.base = NTI1214633;
var NNI1214641 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1214641.node = NNI1214641;
NTI1214641.base = NTI1214619;
var NNI1925075 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1208011, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1208044, name: "Field1", sons: null}]};
NTI1925075.node = NNI1925075;
function makeNimstrLit(c_1475062) {
      var ln = c_1475062.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_1475062.charCodeAt(i);
  }
  return result;
  

  
}
function toJSStr(s_1475096) {
                    var Tmp5;
            var Tmp7;

  var result_1475097 = null;

    var res_1475170 = newSeq_1475128((s_1475096).length);
    var i_1475172 = 0;
    var j_1475174 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_1475172 < (s_1475096).length)) break L2;
          var c_1475175 = s_1475096[i_1475172];
          if ((c_1475175 < 128)) {
          res_1475170[j_1475174] = String.fromCharCode(c_1475175);
          i_1475172 += 1;
          }
          else {
            var helper_1475198 = newSeq_1475128(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_1475199 = c_1475175.toString(16);
                  if (((code_1475199).length == 1)) {
                  helper_1475198.push("%0");;
                  }
                  else {
                  helper_1475198.push("%");;
                  }
                  
                  helper_1475198.push(code_1475199);;
                  i_1475172 += 1;
                    if (((s_1475096).length <= i_1475172)) Tmp5 = true; else {                      Tmp5 = (s_1475096[i_1475172] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_1475175 = s_1475096[i_1475172];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_1475170[j_1475174] = decodeURIComponent(helper_1475198.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_1475170[j_1475174] = helper_1475198.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_1475174 += 1;
        }
    } while(false);
    if (res_1475170.length < j_1475174) { for (var i=res_1475170.length;i<j_1475174;++i) res_1475170.push(null); }
               else { res_1475170.length = j_1475174; };
    result_1475097 = res_1475170.join("");

  return result_1475097;

}
function raiseException(e_1440218, ename_1440219) {
    e_1440218.name = ename_1440219;
    if ((excHandler == 0)) {
    unhandledException(e_1440218);
    }
    
    throw e_1440218;

  
}
function subInt(a_1480437, b_1480438) {
        var result = a_1480437 - b_1480438;
    checkOverflowInt(result);
    return result;
  

  
}
function cstrToNimstr(c_1475079) {
      var ln = c_1475079.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_1475079.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_1475079.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_1490023, src_1490024, ti_1490025) {
  var result_1495219 = null;

    switch (ti_1490025.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_1485401(ti_1490025))) {
      result_1495219 = src_1490024;
      }
      else {
        result_1495219 = [src_1490024[0], src_1490024[1]];
      }
      
      break;
    case 19:
            if (dest_1490023 === null || dest_1490023 === undefined) {
        dest_1490023 = {};
      }
      else {
        for (var key in dest_1490023) { delete dest_1490023[key]; }
      }
      for (var key in src_1490024) { dest_1490023[key] = src_1490024[key]; }
      result_1495219 = dest_1490023;
    
      break;
    case 18:
    case 17:
      if (!((ti_1490025.base == null))) {
      result_1495219 = nimCopy(dest_1490023, src_1490024, ti_1490025.base);
      }
      else {
      if ((ti_1490025.kind == 17)) {
      result_1495219 = (dest_1490023 === null || dest_1490023 === undefined) ? {m_type: ti_1490025} : dest_1490023;
      }
      else {
        result_1495219 = (dest_1490023 === null || dest_1490023 === undefined) ? {} : dest_1490023;
      }
      }
      nimCopyAux(result_1495219, src_1490024, ti_1490025.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_1490024 === null) {
        result_1495219 = null;
      }
      else {
        if (dest_1490023 === null || dest_1490023 === undefined) {
          dest_1490023 = new Array(src_1490024.length);
        }
        else {
          dest_1490023.length = src_1490024.length;
        }
        result_1495219 = dest_1490023;
        for (var i = 0; i < src_1490024.length; ++i) {
          result_1495219[i] = nimCopy(result_1495219[i], src_1490024[i], ti_1490025.base);
        }
      }
    
      break;
    case 28:
            if (src_1490024 !== null) {
        result_1495219 = src_1490024.slice(0);
      }
    
      break;
    default: 
      result_1495219 = src_1490024;
      break;
    }

  return result_1495219;

}
function chckIndx(i_1500086, a_1500087, b_1500088) {
      var Tmp1;

  var result_1500089 = 0;

  BeforeRet: do {
      if (!(a_1500087 <= i_1500086)) Tmp1 = false; else {        Tmp1 = (i_1500086 <= b_1500088);      }    if (Tmp1) {
    result_1500089 = i_1500086;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_1500086, a_1500087, b_1500088);
    }
    
  } while (false);

  return result_1500089;

}
function addInt(a_1480419, b_1480420) {
        var result = a_1480419 + b_1480420;
    checkOverflowInt(result);
    return result;
  

  
}
function mnewString(len_1480044) {
        return new Array(len_1480044);
  

  
}
function chckRange(i_1505016, a_1505017, b_1505018) {
      var Tmp1;

  var result_1505019 = 0;

  BeforeRet: do {
      if (!(a_1505017 <= i_1505016)) Tmp1 = false; else {        Tmp1 = (i_1505016 <= b_1505018);      }    if (Tmp1) {
    result_1505019 = i_1505016;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_1505019;

}
function divInt(a_1480473, b_1480474) {
        if (b_1480474 == 0) raiseDivByZero();
    if (b_1480474 == -1 && a_1480473 == 2147483647) raiseOverflow();
    return Math.trunc(a_1480473 / b_1480474);
  

  
}
function nimMax(a_1480821, b_1480822) {
    var Tmp1;

  var result_1480823 = 0;

  BeforeRet: do {
    if ((b_1480822 <= a_1480821)) {
    Tmp1 = a_1480821;
    }
    else {
    Tmp1 = b_1480822;
    }
    
    result_1480823 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_1480823;

}
function mulInt(a_1480455, b_1480456) {
        var result = a_1480455 * b_1480456;
    checkOverflowInt(result);
    return result;
  

  
}
function eqStrings(a_1480222, b_1480223) {
        if (a_1480222 == b_1480223) return true;
    if (a_1480222 === null && b_1480223.length == 0) return true;
    if (b_1480223 === null && a_1480222.length == 0) return true;
    if ((!a_1480222) || (!b_1480223)) return false;
    var alen = a_1480222.length;
    if (alen != b_1480223.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_1480222[i] != b_1480223[i]) return false;
    return true;
  

  
}
function cmpStrings(a_1480186, b_1480187) {
        if (a_1480186 == b_1480187) return 0;
    if (!a_1480186) return -1;
    if (!b_1480187) return 1;
    for (var i = 0; i < a_1480186.length && i < b_1480187.length; i++) {
      var result = a_1480186[i] - b_1480187[i];
      if (result != 0) return result;
    }
    return a_1480186.length - b_1480187.length;
  

  
}
function addChar(x_1525031, c_1525032) {
    x_1525031.push(c_1525032);

  
}
function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

function add_1377211(x_1377214, x_1377214_Idx, y_1377215) {
          if (x_1377214[x_1377214_Idx] === null) { x_1377214[x_1377214_Idx] = []; }
      var off = x_1377214[x_1377214_Idx].length;
      x_1377214[x_1377214_Idx].length += y_1377215.length;
      for (var i = 0; i < y_1377215.length; ++i) {
        x_1377214[x_1377214_Idx][off+i] = y_1377215.charCodeAt(i);
      }
    

  
}
function newSeq_1475128(len_1475131) {
  var result_1475133 = [];

    result_1475133 = new Array(len_1475131); for (var i=0;i<len_1475131;++i) {result_1475133[i]=null;}
  return result_1475133;

}
function unhandledException(e_1435059) {
    var buf_1435060 = [[]];
    if (!(((e_1435059.message).length == 0))) {
    buf_1435060[0].push.apply(buf_1435060[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_1435060[0].push.apply(buf_1435060[0], e_1435059.message);;
    }
    else {
    buf_1435060[0].push.apply(buf_1435060[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_1435060[0].push.apply(buf_1435060[0], makeNimstrLit(" ["));;
    add_1377211(buf_1435060, 0, e_1435059.name);
    buf_1435060[0].push.apply(buf_1435060[0], makeNimstrLit("]\x0A"));;
    var cbuf_1440201 = toJSStr(buf_1435060[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_1440201);
  }
  else {
    throw cbuf_1440201;
  }
  

  
}
function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI1214637, name: null, trace: [], up: null}, "OverflowDefect");

  
}
function checkOverflowInt(a_1480403) {
        if (a_1480403 > 2147483647 || a_1480403 < -2147483648) raiseOverflow();
  

  
}
function isFatPointer_1485401(ti_1485403) {
  var result_1485404 = false;

  BeforeRet: do {
    result_1485404 = !((ConstSet1[ti_1485403.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_1485404;

}
function nimCopyAux(dest_1490028, src_1490029, n_1490031) {
    switch (n_1490031.kind) {
    case 0:
      break;
    case 1:
            dest_1490028[n_1490031.offset] = nimCopy(dest_1490028[n_1490031.offset], src_1490029[n_1490031.offset], n_1490031.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_1490031.sons.length; i++) {
      nimCopyAux(dest_1490028, src_1490029, n_1490031.sons[i]);
    }
    
      break;
    case 3:
            dest_1490028[n_1490031.offset] = nimCopy(dest_1490028[n_1490031.offset], src_1490029[n_1490031.offset], n_1490031.typ);
      for (var i = 0; i < n_1490031.sons.length; ++i) {
        nimCopyAux(dest_1490028, src_1490029, n_1490031.sons[i][1]);
      }
    
      break;
    }

  
}
function raiseIndexError(i_1460047, a_1460048, b_1460049) {
    var Tmp1;

    if ((b_1460049 < a_1460048)) {
    Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_1460047)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_1460048)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_1460049)+"") || []);
    }
    
    raiseException({message: nimCopy(null, Tmp1, NTI1208013), parent: null, m_type: NTI1214649, name: null, trace: [], up: null}, "IndexDefect");

  
}
function HEX5BHEX5D_1576029(s_1576031, i_1576032) {
  var result_1576033 = 0;

    result_1576033 = s_1576031[chckIndx(subInt((s_1576031).length, i_1576032), 0, (s_1576031).length-1)];

  return result_1576033;

}
function HEX5BHEX5D_1875005(s_1875010, i_1875011) {
  var result_1875013 = null;
  var result_1875013_Idx = 0;

    result_1875013 = s_1875010; result_1875013_Idx = chckIndx(subInt((s_1875010).length, i_1875011), 0, (s_1875010).length-1);

  return [result_1875013, result_1875013_Idx];

}
function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI1214653, name: null, trace: [], up: null}, "RangeDefect");

  
}
function HEX5BHEX5D_1890084(s_1890088, x_1890090) {
  var result_1890091 = [];

    var a_1890201 = x_1890090.a;
    var L_1890401 = addInt(subInt(subInt((s_1890088).length, x_1890090.b), a_1890201), 1);
    result_1890091 = nimCopy(null, mnewString(chckRange(L_1890401, 0, 2147483647)), NTI1208013);
    L1: do {
      var i_1890409 = 0;
      var i_1925057 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_1925057 < L_1890401)) break L3;
            i_1890409 = i_1925057;
            result_1890091[chckIndx(i_1890409, 0, (result_1890091).length-1)] = s_1890088[chckIndx(addInt(i_1890409, a_1890201), 0, (s_1890088).length-1)];
            i_1925057 = addInt(i_1925057, 1);
          }
      } while(false);
    } while(false);

  return result_1890091;

}
function HEX2EHEX2E_1890002(a_1890007, b_1890009) {
  var result_1890015 = ({a: 0, b: 0});

    nimCopy(result_1890015, {a: a_1890007, b: b_1890009}, NTI1890012);

  return result_1890015;

}
function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI1214635, name: null, trace: [], up: null}, "DivByZeroDefect");

  
}
function HEX2A_1872020(x_1872022, order_1872023) {
  var result_1872024 = 0;

    var y_1872029 = subInt(order_1872023, 1);
    result_1872024 = subInt((x_1872022 ^ y_1872029), y_1872029);

  return result_1872024;

}
function sysFatal_1325418(message_1325422) {
    raiseException({message: nimCopy(null, message_1325422, NTI1208013), m_type: NTI1214641, parent: null, name: null, trace: [], up: null}, "AssertionDefect");

  
}
function raiseAssert_1325414(msg_1325416) {
    sysFatal_1325418(msg_1325416);

  
}
function failedAssertImpl_1325480(msg_1325482) {
    raiseAssert_1325414(msg_1325482);

  
}
function merge_1900090(a_1900095, b_1900098, lo_1900099, m_1900100, hi_1900101, cmp_1900105, order_1900106) {
  BeforeRet: do {
    if ((HEX2A_1872020(cmp_1900105(a_1900095[chckIndx(m_1900100, 0, (a_1900095).length-1)], a_1900095[chckIndx(addInt(m_1900100, 1), 0, (a_1900095).length-1)]), order_1900106) <= 0)) {
    break BeforeRet;
    }
    
    var j_1900107 = lo_1900099;
    if (!((j_1900107 <= m_1900100))) {
    failedAssertImpl_1325480(makeNimstrLit("algorithm.nim(343, 10) `j <= m` "));
    }
    
    var bb_1910402 = 0;
    L1: do {
        L2: while (true) {
        if (!(j_1900107 <= m_1900100)) break L2;
          b_1900098[chckIndx(bb_1910402, 0, (b_1900098).length-1)] = a_1900095[chckIndx(j_1900107, 0, (a_1900095).length-1)];
          bb_1910402 = addInt(bb_1910402, 1);
          j_1900107 = addInt(j_1900107, 1);
        }
    } while(false);
    var i_1910614 = 0;
    var k_1910615 = lo_1900099;
    L3: do {
        L4: while (true) {
        if (!((k_1910615 < j_1900107) && (j_1900107 <= hi_1900101))) break L4;
          if ((HEX2A_1872020(cmp_1900105(b_1900098[chckIndx(i_1910614, 0, (b_1900098).length-1)], a_1900095[chckIndx(j_1900107, 0, (a_1900095).length-1)]), order_1900106) <= 0)) {
          a_1900095[chckIndx(k_1910615, 0, (a_1900095).length-1)] = b_1900098[chckIndx(i_1910614, 0, (b_1900098).length-1)];
          i_1910614 = addInt(i_1910614, 1);
          }
          else {
            a_1900095[chckIndx(k_1910615, 0, (a_1900095).length-1)] = a_1900095[chckIndx(j_1900107, 0, (a_1900095).length-1)];
            j_1900107 = addInt(j_1900107, 1);
          }
          
          k_1910615 = addInt(k_1910615, 1);
        }
    } while(false);
    L5: do {
        L6: while (true) {
        if (!(k_1910615 < j_1900107)) break L6;
          a_1900095[chckIndx(k_1910615, 0, (a_1900095).length-1)] = b_1900098[chckIndx(i_1910614, 0, (b_1900098).length-1)];
          k_1910615 = addInt(k_1910615, 1);
          i_1910614 = addInt(i_1910614, 1);
        }
    } while(false);
  } while (false);

  
}
function sort_1900060(a_1900065, cmp_1900069, order_1900070) {
    var n_1900075 = (a_1900065).length;
    var b_1900077 = [];
    b_1900077 = new Array(chckRange(divInt(n_1900075, 2), 0, 2147483647)); for (var i=0;i<chckRange(divInt(n_1900075, 2), 0, 2147483647);++i) {b_1900077[i]=[];}    var s_1900086 = 1;
    L1: do {
        L2: while (true) {
        if (!(s_1900086 < n_1900075)) break L2;
          var m_1900087 = subInt(subInt(n_1900075, 1), s_1900086);
          L3: do {
              L4: while (true) {
              if (!(0 <= m_1900087)) break L4;
                merge_1900090(a_1900065, b_1900077, nimMax(addInt(subInt(m_1900087, s_1900086), 1), 0), m_1900087, addInt(m_1900087, s_1900086), cmp_1900069, order_1900070);
                m_1900087 = subInt(m_1900087, mulInt(s_1900086, 2));
              }
          } while(false);
          s_1900086 = mulInt(s_1900086, 2);
        }
    } while(false);

  
}
function cmp_1900036(x_1900039, y_1900040) {
  var result_1900041 = 0;

  BeforeRet: do {
    if (eqStrings(x_1900039, y_1900040)) {
    result_1900041 = 0;
    break BeforeRet;
    }
    
    if ((cmpStrings(x_1900039, y_1900040) < 0)) {
    result_1900041 = -1;
    break BeforeRet;
    }
    
    result_1900041 = 1;
    break BeforeRet;
  } while (false);

  return result_1900041;

}
function sort_1900026(a_1900031, order_1900032) {
    sort_1900060(a_1900031, cmp_1900036, order_1900032);

  
}
function bwt(text_1873016) {
            var Tmp4;
            var Tmp5;

  var result_1873017 = [];

    var m_1873030 = [(text_1873016 || []).concat(makeNimstrLit("$") || [])];
    L1: do {
      var i_1873039 = 0;
      var colontmp__1925023 = 0;
      colontmp__1925023 = (text_1873016).length;
      var res_1925028 = 1;
      L2: do {
          L3: while (true) {
          if (!(res_1925028 <= colontmp__1925023)) break L3;
            i_1873039 = res_1925028;
            m_1873030.push([HEX5BHEX5D_1576029((Tmp4 = HEX5BHEX5D_1875005(m_1873030, 1), Tmp4)[0][Tmp4[1]], 1)].concat(HEX5BHEX5D_1890084((Tmp5 = HEX5BHEX5D_1875005(m_1873030, 1), Tmp5)[0][Tmp5[1]], HEX2EHEX2E_1890002(0, 2)) || []));;
            res_1925028 = addInt(res_1925028, 1);
          }
      } while(false);
    } while(false);
    sort_1900026(m_1873030, 1);
    L6: do {
      var i_1920214 = null;
      var i_1920214_Idx = 0;
      var i_1925036 = 0;
      var L_1925037 = (m_1873030).length;
      L7: do {
          L8: while (true) {
          if (!(i_1925036 < L_1925037)) break L8;
            i_1920214 = m_1873030; i_1920214_Idx = chckIndx(i_1925036, 0, (m_1873030).length-1);
            addChar(result_1873017, HEX5BHEX5D_1576029(i_1920214[i_1920214_Idx], 1));;
            i_1925036 = addInt(i_1925036, 1);
            if (!(((m_1873030).length == L_1925037))) {
            failedAssertImpl_1325480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);

  return result_1873017;

}
function find_1925077(a_1925081, item_1925082) {
  var result_1925083 = 0;

  BeforeRet: do {
    result_1925083 = 0;
    L1: do {
      var i_1925085 = 0;
      var i_1936569 = 0;
      var L_1936570 = (a_1925081).length;
      L2: do {
          L3: while (true) {
          if (!(i_1936569 < L_1936570)) break L3;
            i_1925085 = a_1925081[chckIndx(i_1936569, 0, (a_1925081).length-1)];
            if ((i_1925085 == item_1925082)) {
            break BeforeRet;
            }
            
            result_1925083 = addInt(result_1925083, 1);
            i_1936569 = addInt(i_1936569, 1);
            if (!(((a_1925081).length == L_1936570))) {
            failedAssertImpl_1325480(makeNimstrLit("iterators.nim(222, 11) `len(a) == L` the length of the string changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    result_1925083 = -1;
  } while (false);

  return result_1925083;

}
function merge_1925281(a_1925286, b_1925289, lo_1925290, m_1925291, hi_1925292, cmp_1925296, order_1925297) {
  BeforeRet: do {
    if ((HEX2A_1872020(cmp_1925296(a_1925286[chckIndx(m_1925291, 0, (a_1925286).length-1)], a_1925286[chckIndx(addInt(m_1925291, 1), 0, (a_1925286).length-1)]), order_1925297) <= 0)) {
    break BeforeRet;
    }
    
    var j_1925298 = lo_1925290;
    if (!((j_1925298 <= m_1925291))) {
    failedAssertImpl_1325480(makeNimstrLit("algorithm.nim(343, 10) `j <= m` "));
    }
    
    var bb_1935402 = 0;
    L1: do {
        L2: while (true) {
        if (!(j_1925298 <= m_1925291)) break L2;
          nimCopy(b_1925289[chckIndx(bb_1935402, 0, (b_1925289).length-1)], a_1925286[chckIndx(j_1925298, 0, (a_1925286).length-1)], NTI1925075);
          bb_1935402 = addInt(bb_1935402, 1);
          j_1925298 = addInt(j_1925298, 1);
        }
    } while(false);
    var i_1935614 = 0;
    var k_1935615 = lo_1925290;
    L3: do {
        L4: while (true) {
        if (!((k_1935615 < j_1925298) && (j_1925298 <= hi_1925292))) break L4;
          if ((HEX2A_1872020(cmp_1925296(b_1925289[chckIndx(i_1935614, 0, (b_1925289).length-1)], a_1925286[chckIndx(j_1925298, 0, (a_1925286).length-1)]), order_1925297) <= 0)) {
          nimCopy(a_1925286[chckIndx(k_1935615, 0, (a_1925286).length-1)], b_1925289[chckIndx(i_1935614, 0, (b_1925289).length-1)], NTI1925075);
          i_1935614 = addInt(i_1935614, 1);
          }
          else {
            nimCopy(a_1925286[chckIndx(k_1935615, 0, (a_1925286).length-1)], a_1925286[chckIndx(j_1925298, 0, (a_1925286).length-1)], NTI1925075);
            j_1925298 = addInt(j_1925298, 1);
          }
          
          k_1935615 = addInt(k_1935615, 1);
        }
    } while(false);
    L5: do {
        L6: while (true) {
        if (!(k_1935615 < j_1925298)) break L6;
          nimCopy(a_1925286[chckIndx(k_1935615, 0, (a_1925286).length-1)], b_1925289[chckIndx(i_1935614, 0, (b_1925289).length-1)], NTI1925075);
          k_1935615 = addInt(k_1935615, 1);
          i_1935614 = addInt(i_1935614, 1);
        }
    } while(false);
  } while (false);

  
}
function sort_1925251(a_1925256, cmp_1925260, order_1925261) {
    var n_1925266 = (a_1925256).length;
    var b_1925268 = [];
    b_1925268 = new Array(chckRange(divInt(n_1925266, 2), 0, 2147483647)); for (var i=0;i<chckRange(divInt(n_1925266, 2), 0, 2147483647);++i) {b_1925268[i]={Field0: 0, Field1: 0};}    var s_1925277 = 1;
    L1: do {
        L2: while (true) {
        if (!(s_1925277 < n_1925266)) break L2;
          var m_1925278 = subInt(subInt(n_1925266, 1), s_1925277);
          L3: do {
              L4: while (true) {
              if (!(0 <= m_1925278)) break L4;
                merge_1925281(a_1925256, b_1925268, nimMax(addInt(subInt(m_1925278, s_1925277), 1), 0), m_1925278, addInt(m_1925278, s_1925277), cmp_1925260, order_1925261);
                m_1925278 = subInt(m_1925278, mulInt(s_1925277, 2));
              }
          } while(false);
          s_1925277 = mulInt(s_1925277, 2);
        }
    } while(false);

  
}
function HEX3DHEX3D_1925146(x_1925149, y_1925150) {
  var result_1925151 = false;

  BeforeRet: do {
    if (!((x_1925149["Field0"] == y_1925150["Field0"]))) {
    result_1925151 = false;
    break BeforeRet;
    }
    
    if (!((x_1925149["Field1"] == y_1925150["Field1"]))) {
    result_1925151 = false;
    break BeforeRet;
    }
    
    result_1925151 = true;
    break BeforeRet;
  } while (false);

  return result_1925151;

}
function cmp_1925196(x_1925199, y_1925200) {
  var result_1925201 = 0;

  BeforeRet: do {
    if ((x_1925199 == y_1925200)) {
    result_1925201 = 0;
    break BeforeRet;
    }
    
    if ((x_1925199 < y_1925200)) {
    result_1925201 = -1;
    break BeforeRet;
    }
    
    result_1925201 = 1;
    break BeforeRet;
  } while (false);

  return result_1925201;

}
function cmp_1385027(x_1385030, y_1385031) {
  var result_1385032 = 0;

  BeforeRet: do {
    if ((x_1385030 == y_1385031)) {
    result_1385032 = 0;
    break BeforeRet;
    }
    
    if ((x_1385030 < y_1385031)) {
    result_1385032 = -1;
    break BeforeRet;
    }
    
    result_1385032 = 1;
    break BeforeRet;
  } while (false);

  return result_1385032;

}
function HEX3C_1925184(x_1925187, y_1925188) {
  var result_1925189 = false;

  BeforeRet: do {
    var c_1925215 = cmp_1925196(x_1925187["Field0"], y_1925188["Field0"]);
    if ((c_1925215 < 0)) {
    result_1925189 = true;
    break BeforeRet;
    }
    
    if ((0 < c_1925215)) {
    result_1925189 = false;
    break BeforeRet;
    }
    
    var c_1925221 = cmp_1385027(x_1925187["Field1"], y_1925188["Field1"]);
    if ((c_1925221 < 0)) {
    result_1925189 = true;
    break BeforeRet;
    }
    
    if ((0 < c_1925221)) {
    result_1925189 = false;
    break BeforeRet;
    }
    
    result_1925189 = false;
    break BeforeRet;
  } while (false);

  return result_1925189;

}
function cmp_1925140(x_1925143, y_1925144) {
  var result_1925145 = 0;

  BeforeRet: do {
    if (HEX3DHEX3D_1925146(x_1925143, y_1925144)) {
    result_1925145 = 0;
    break BeforeRet;
    }
    
    if (HEX3C_1925184(x_1925143, y_1925144)) {
    result_1925145 = -1;
    break BeforeRet;
    }
    
    result_1925145 = 1;
    break BeforeRet;
  } while (false);

  return result_1925145;

}
function sort_1925130(a_1925135, order_1925136) {
    sort_1925251(a_1925135, cmp_1925140, order_1925136);

  
}
function ibwt(text_1925072) {
  var result_1925073 = [];

    var m_1925076 = [];
    var k_1925105 = find_1925077(text_1925072, 36);
    var t_1925106 = 0;
    L1: do {
      var i_1925115 = 0;
      var colontmp__1936554 = 0;
      colontmp__1936554 = subInt((text_1925072).length, 1);
      var res_1936555 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_1936555 <= colontmp__1936554)) break L3;
            i_1925115 = res_1936555;
            m_1925076.push({Field0: text_1925072[chckIndx(i_1925115, 0, (text_1925072).length-1)], Field1: i_1925115});;
            res_1936555 = addInt(res_1936555, 1);
          }
      } while(false);
    } while(false);
    sort_1925130(m_1925076, 1);
    L4: do {
      var __1936538 = 0;
      var colontmp__1936561 = 0;
      colontmp__1936561 = subInt((text_1925072).length, 1);
      var res_1936562 = 1;
      L5: do {
          L6: while (true) {
          if (!(res_1936562 <= colontmp__1936561)) break L6;
            __1936538 = res_1936562;
            var __1936539 = nimCopy(null, m_1925076[chckIndx(k_1925105, 0, (m_1925076).length-1)], NTI1925075);
            t_1925106 = __1936539["Field0"];
            k_1925105 = __1936539["Field1"];
            addChar(result_1925073, t_1925106);;
            res_1936562 = addInt(res_1936562, 1);
          }
      } while(false);
    } while(false);

  return result_1925073;

}
var result_1936577 = bwt(makeNimstrLit("banana"));
rawEcho(result_1936577);
rawEcho(ibwt(result_1936577));
